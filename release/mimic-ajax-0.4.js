function Mimic(){this.mimics=[];
this.verifiers=[];
this.logs=[];
this.jQuery=null;
this._value=null;
this.register=function(log,verifier){this.logs.push(log);
this.verifiers.push(verifier);
};
this.reset=function(){for(var i=0;
i<this.logs.length;
i++){this.logs[i].empty();
}if(this.jQuery!=null){this.jQuery._reset();
}};
this.verify=function(){for(var i=0;
i<this.verifiers.length;
i++){this.verifiers[i].verify();
}if(this.jQuery!=null){Mimic.Verifier.JQuery(this.jQuery);
}};
this.isMimic=function(mimic){return mimic._activeExpectations!=null;
};
}Mimic=new Mimic();
function mimic(object,withImplementation){if(!Mimic.isMimic(object)){Mimic.Instrument(object,withImplementation);
Mimic.mimics.push(object);
}return object;
}if(typeof Mimic==="undefined"){Mimic={};
}Mimic.Ajax=function(){var data=[];
var matchers=function(url){return{toHaveResponse:function(status,text){data.push({url:url,text:text,status:status});
}};
};
this.request=function(url){return matchers(url);
};
this.start=function(){XMLHttpRequest=function(){this.onreadystatechange=null;
this.readyState=-1;
this.responseText=null;
this.responseXML=null;
this.status=-1;
this.statusText=null;
this.open=function(method,url,async,user,password){for(var i=0;
i<data.length;
i++){if(data[i].url===url){this.responseText=data[i].text;
this.status=data[i].status;
this.readyState=4;
}}};
this.send=function(data){this.onreadystatechange(this);
};
this.getAllResponseHeaders=function(){};
this.getResponseHeader=function(header){};
this.setRequestHeader=function(header,value){};
this.abort=function(){};
};
};
};
Mimic.HTTP={SUCCESS:200,INTERNAL_SERVER_ERROR:500,NOT_FOUND:404};
Mimic.Language={inject:function(mimic){if(mimic==undefined){throw ("An object to be injected must be provided");
}Mimic.Language._mimic=mimic;
return Mimic.Language;
},into:function(object){if(object==undefined){throw ("Cannot inject object into an object which has not been provided");
}this._object=object;
return this;
},as:function(name){if(name==null||name==""||typeof name!="string"){throw ("Cannot inject object when a name is not provided");
}this._object[name]=this._mimic;
this._object=null;
this._mimic=null;
},that:function(value){Mimic.Language._value=value;
return Mimic.Language;
},equals:function(value){if(this._value!=value&&!Mimic.Util.Object.equals(this._value,value)){throw ('The value "'+this._value+'" was expected to equal "'+value+'", but does not.');
}this._value=null;
}};
function times(){}function time(){}function anything(){}function never(){}window.given=window;
window.when=window;
window.then=window;
window.and=window;
window.that=Mimic.Language.that;
window.inject=Mimic.Language.inject;
window.itShould={alert:function(msg){message=msg;
return window;
},pass:function(){},error:function(exception){thrown=exception;
return window;
}};
window.realAlert=window.alert;
window.alert=function(actualMessage){if(message!=undefined&&message!=null){expect(actualMessage).toEqual(message);
}else{realAlert(actualMessage);
}};
var thrown,message;
var withImplementation=true;
var ajax=Mimic.Ajax;
if(typeof jasmine!="undefined"){jasmine.Block.prototype.execute=function(onComplete){try{ajax=new Mimic.Ajax();
ajax.start();
this.func.apply(this.spec,[ajax.request]);
Mimic.verify();
Mimic.reset();
if(thrown!=null){var expected=thrown;
thrown=null;
throw ("An exception was expected to be thrown but was not. The exception expected is:<br/><br/>"+expected);
}}catch(e){Mimic.reset();
if(thrown!=null){var expected=thrown;
thrown=null;
expect(e).toEqual(expected);
}else{this.spec.fail(e);
}}onComplete();
};
}