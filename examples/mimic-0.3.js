function Mimic(){this.mimics=[];
this.verifiers=[];
this.logs=[];
this.jQuery=null;
this._value=null;
this.register=function(log,verifier){this.logs.push(log);
this.verifiers.push(verifier);
};
this.reset=function(){for(var i=0;
i<this.logs.length;
i++){this.logs[i].empty();
}if(this.jQuery!=null){this.jQuery._reset();
}};
this.verify=function(){for(var i=0;
i<this.verifiers.length;
i++){this.verifiers[i].verify();
}if(this.jQuery!=null){Mimic.Verifier.JQuery(this.jQuery);
}};
this.isMimic=function(mimic){return mimic._activeExpectations!=null;
};
}Mimic=new Mimic();
function mimic(object,withImplementation){if(!Mimic.isMimic(object)){Mimic.Instrument(object,withImplementation);
Mimic.mimics.push(object);
}return object;
}Mimic.Ajax={requestMimic:{},_XMLHttpRequest:XMLHttpRequest,_request:null,ajaxData:[],monitor:function(){Mimic.Ajax.Instrument();
},reset:function(){XMLHttpRequest=this._XMLHttpRequest;
this.ajaxData=[];
},requestsFrom:function(request){this._request=request;
return window;
},respondsWith:function(response){this.ajaxData.push({request:this._request,response:response});
}};
Mimic.Ajax.Instrument=function(){XMLHttpRequest=function(){this.onreadystatechange=null;
this.readyState=-1;
this.responseText=null;
this.responseXML=null;
this.status=-1;
this.statusText=null;
this.open=function(method,url,async,user,password){for(var data in Mimic.Ajax.ajaxData){if(Mimic.Ajax.ajaxData[data].request==url){this.responseText=Mimic.Ajax.ajaxData[data].response;
this.status=200;
this.readyState=4;
}}};
this.getAllResponseHeaders=function(){};
this.getResponseHeader=function(header){};
this.setRequestHeader=function(header,value){};
this.send=function(data){this.onreadystatechange(this);
};
this.abort=function(){};
};
};
Mimic.Language={inject:function(mimic){if(mimic==undefined){throw ("An object to be injected must be provided");
}Mimic.Language._mimic=mimic;
return Mimic.Language;
},into:function(object){if(object==undefined){throw ("Cannot inject object into an object which has not been provided");
}this._object=object;
return this;
},as:function(name){if(name==null||name==""||typeof name!="string"){throw ("Cannot inject object when a name is not provided");
}this._object[name]=this._mimic;
this._object=null;
this._mimic=null;
},that:function(value){Mimic.Language._value=value;
return Mimic.Language;
},equals:function(value){if(this._value!=value&&!Mimic.Util.Object.equals(this._value,value)){throw ('The value "'+this._value+'" was expected to equal "'+value+'", but does not.');
}this._value=null;
}};
function times(){}function time(){}function anything(){}function never(){}window.given=window;
window.when=window;
window.then=window;
window.and=window;
window.that=Mimic.Language.that;
window.inject=Mimic.Language.inject;
window.itShould={alert:function(msg){message=msg;
return window;
},pass:function(){},error:function(exception){thrown=exception;
return window;
}};
window.realAlert=window.alert;
window.alert=function(actualMessage){if(message!=undefined&&message!=null){expect(actualMessage).toEqual(message);
}else{realAlert(actualMessage);
}};
var thrown,message;
var withImplementation=true;
var ajax=Mimic.Ajax;
Mimic.Log=function(calls,expectations){this.calls=calls;
this.expectations=expectations;
this.empty=function(){this.calls.empty();
this.expectations.empty();
};
};
Mimic.Util={};
Mimic.Util.Array={contains:function(array1,array2){if(array1==null||array2==null){return false;
}for(var i=0;
i<array1.length;
i++){if(Mimic.Util.Object.equals(array1[i],array2)==true){return i;
}}return false;
},position:function(array,value){for(var i=0;
i<array.length;
i++){if(array[i]==value){return i;
}}return -1;
},clean:function(array){var clean=[];
for(var i=0;
i<array.length;
i++){if(array[i]!=null){clean.push(array[i]);
}}return clean;
}};
Mimic.Util.Object={equals:function(object1,object2,parents){if(parents==null){parents=[];
}parents.push(object1);
if(typeof object1=="number"&&isNaN(object1)&&typeof object2=="number"&&isNaN(object2)){return true;
}if(typeof object1=="object"&&object1==null&&typeof object2=="object"&&object2==null){return true;
}if(typeof object1=="undefined"&&object1==undefined&&typeof object2=="undefined"&&object2==undefined){return true;
}if(object1==null||object2==null){return false;
}for(var i in object1){if(object1==object1[i]&&typeof object1==typeof object1[i]){continue;
}var position=Mimic.Util.Array.position(parents,object1[i]);
if(position!=-1){if(object1[i]!=object2[i]){return false;
}}else{if(typeof object1[i]!=typeof object2[i]){return false;
}else{if(typeof object1[i]=="object"||typeof object1[i]=="function"||isNaN(object1[i])){if(this.equals(object1[i],object2[i],parents)==false){return false;
}}else{if(object1[i]!=object2[i]){return false;
}}}}}if(typeof object1==typeof object2&&typeof object1!="object"&&typeof object1!="function"&&object1!=object2){return false;
}return true;
},toString:function(object,withKey){var string=[];
for(var key in object){if(object[key]==null){string.push("null");
}else{if(typeof object[key]=="object"){if(object[key].join!=null){string.push("["+this.toString(object[key])+"]");
}else{string.push("{"+this.toString(object[key],true)+"}");
}}else{if(typeof object[key]=="string"){if(withKey==true){string.push('"'+key+'": "'+object[key]+'"');
}else{string.push('"'+object[key]+'"');
}}else{string.push(object[key]);
}}}}return string.join(", ");
},clone:function(object,parents){var newObject=(object instanceof Array)?[]:{};
if(object==null){return null;
}if(parents==null){parents=[];
}parents.push(object);
if(typeof object!="object"){return object;
}for(var key in object){var position=Mimic.Util.Array.position(parents,object[key]);
if(position!=-1){newObject[key]=parents[position];
}else{if(object[key]&&typeof object[key]=="object"){newObject[key]=Mimic.Util.Object.clone(object[key],parents);
}else{newObject[key]=object[key];
}}}return newObject;
}};
Mimic.Util.Parameters={arguments:function(theFunction){return theFunction.toString().replace(/ /g,"").split("(")[1].split(")")[0];
}};
Mimic.Verifier=function(verifier){this.verifier=verifier;
this.verify=function(){this.verifier.verify();
};
};
if(typeof jasmine!="undefined"){beforeEach(function(){this.addMatchers({toHaveClass:function(expected){return this.actual.className.split(" ").indexOf(expected)!=-1;
},toNotHaveClass:function(expected){return !this.toHaveClass(expected);
},toHaveText:function(expected){return this.actual.textContent.indexOf(expected)!=-1;
},toNotHaveText:function(expected){return !this.toHaveText(expected);
},toHaveParent:function(expected){var current=this.actual.parentNode;
while(current!=null&&current!=expected){current=current.parentNode;
}return current!=null;
},toNotHaveParent:function(expected){return !this.toHaveParent(expected);
},toHaveChild:function(expected){return _nodeListHas(this.actual.childNodes,expected);
},toNotHaveChild:function(expected){return !_nodeListHas(this.actual.childNodes,expected);
},toHaveSibling:function(expected){if(this.actual.parentNode==null||expected.parentNode==null){return false;
}return this.actual.parentNode==expected.parentNode;
},toNotHaveSibling:function(expected){return !this.toHaveSibling(expected);
},toHaveValue:function(expected){return this.actual.value==expected;
},toNotHaveValue:function(expected){return !this.toHaveValue(expected);
}});
});
function _nodeListHas(childNodes,expected){for(var i=0;
i<childNodes.length;
i++){if(childNodes[i]==expected){return true;
}else{if(childNodes[i].hasChildNodes()){if(_nodeListHas(childNodes[i].childNodes,expected)){return true;
}}}}return false;
}}if(typeof jasmine!="undefined"){jasmine.Block.prototype.execute=function(onComplete){try{this.func.apply(this.spec);
Mimic.verify();
Mimic.reset();
if(thrown!=null){var expected=thrown;
thrown=null;
throw ("An exception was expected to be thrown but was not. The exception expected is:<br/><br/>"+expected);
}}catch(e){Mimic.reset();
if(thrown!=null){var expected=thrown;
thrown=null;
expect(e).toEqual(expected);
}else{this.spec.fail(e);
}}onComplete();
};
}if(typeof Screw!="undefined"){Screw.Specifications.itOriginal=Screw.Specifications.it;
Screw.Specifications.it=function(name,fnOriginal){Screw.Specifications.itOriginal(name,function(){try{fnOriginal();
Mimic.verify();
Mimic.reset();
if(thrown!=null){var expected=thrown;
thrown=null;
throw ("An exception was expected to be thrown but was not. The exception expected is:<br/><br/>"+expected);
}}catch(exception){Mimic.reset();
if(thrown!=null){var expected=thrown;
thrown=null;
Screw.Matchers.expect(exception).to(Screw.Matchers.equal,expected);
}else{throw (exception);
}}});
};
jQuery.fn.text=function(text){return this.html(text);
};
if(!window.expect&&!window.it){window.expect=Screw.Matchers.expect;
window.it=window;
}}Mimic.Calls=function(){this.calls=[];
this.add=function(call){this.calls.push(call);
};
this.empty=function(){this.calls=[];
};
this.withName=function(mimic,name){var calls=[];
for(var i=0;
i<this.calls.length;
i++){if(this.calls[i].isRelatedTo(mimic)&&this.calls[i].hasName(name)){calls.push(this.calls[i]);
}}return calls;
};
this.nextWithParameters=function(mimic,parameters){for(var i=0;
i<this.calls.length;
i++){if(this.calls[i].isRelatedTo(mimic)&&Mimic.Util.Object.equals(parameters,this.calls[i].parameters)&&this.calls[i].checked==false){return this.calls[i];
}}return null;
};
};
Mimic.Call=function(mimic,name,parameters){this.mimic=mimic;
this.name=name;
this.parameters=parameters;
this.checked=false;
this.isRelatedTo=function(thisMimic){var current=this.mimic;
while(current!=thisMimic){current=current._parentMimic;
if(!current){return false;
}}return true;
};
this.hasName=function(thisName){var current=this.mimic;
var name=this.name;
while(thisName!=name){name=current._callPrefix+"."+name;
current=current._parentMimic;
if(!current){return false;
}}return true;
};
};
Mimic.Expectations=function(){this.expectations=[];
this.add=function(expectation){for(var i in this.expectations){if(this.expectations[i].name==expectation.name&&this.expectations[i].callExpected!=expectation.callExpected){this.expectations[i]=null;
}}this.expectations=Mimic.Util.Array.clean(this.expectations);
this.expectations.push(expectation);
};
this.returnFor=function(name,parameters){for(var i in this.expectations){if(this.expectations[i].name==name&&Mimic.Util.Object.equals(this.expectations[i].parameters,parameters)){return this.expectations[i].returns;
}}};
this.copy=function(expectationToCopy){var expectation=new Mimic.Expectation(expectationToCopy.mimic,expectationToCopy.name,expectationToCopy.callExpected,expectationToCopy.parameterCount);
expectation.unlimited=expectationToCopy.unlimited;
expectation.parameters=Mimic.Util.Object.clone(expectationToCopy.parameters);
expectation.returns=expectationToCopy.returns;
expectation.throwz=expectationToCopy.throwz;
return expectation;
};
this.countFor=function(name){var expectedCount=0;
for(var i=0;
i<this.expectations.length;
i++){if(this.expectations[i].unlimited==false){if(expectedCount==-1){expectedCount=0;
}expectedCount++;
}else{expectedCount=-1;
}}return expectedCount;
};
this.failedParametersFrom=function(calls){var failedExpectations=[];
for(var i=0;
i<this.expectations.length;
i++){var call=calls.nextWithParameters(this.expectations[i].mimic,this.expectations[i].parameters);
if(call!=null){call.checked=true;
}else{failedExpectations.push(this.expectations[i]);
}}return failedExpectations;
};
this.empty=function(){this.expectations=[];
};
};
Mimic.Expectation=function(mimic,name,callExpected,parameterCount){this.mimic=mimic;
this.name=name;
this.callExpected=callExpected;
this.parameterCount=parameterCount;
this.unlimited=false;
this.parameters=[];
this.returns=null;
this.throwz=null;
};
Mimic.Instrument=function(object,withImplementation,parentMimic,callPrefix){for(var member in object){try{object[member];
}catch(e){if(e.message.indexOf("Permission denied")!=-1){continue;
}}if(typeof object[member]=="function"){var instrumentedFunction=["object.",member," = function(",Mimic.Util.Parameters.arguments(object[member]),") { ",'    Mimic.Log.Default.calls.add(new Mimic.Call(this, "',member,'", Mimic.Util.Object.clone([',Mimic.Util.Parameters.arguments(object[member]),"])));",'    if (Mimic.Log.Default.expectations.returnFor("',member,'", Mimic.Util.Array.clean([',Mimic.Util.Parameters.arguments(object[member]),"])) != null) { ",'    	return Mimic.Log.Default.expectations.returnFor("',member,'", Mimic.Util.Array.clean([',Mimic.Util.Parameters.arguments(object[member]),"]));","    } else {"];
if(withImplementation==true){instrumentedFunction=instrumentedFunction.concat([" return (",object[member].toString(),")(",Mimic.Util.Parameters.arguments(object[member]),");"]);
}instrumentedFunction=instrumentedFunction.concat(" } }");
eval(instrumentedFunction.join(""));
}else{if(typeof object[member]=="object"&&object[member]!=null&&object[member].join==null){if(!Mimic.isMimic(object[member])){Mimic.Instrument(object[member],withImplementation,object,member);
}}}}object._activeExpectations=[];
for(var member in Mimic.Language.Default){if(typeof Mimic.Language.Default[member]=="function"){var functionString=eval("Mimic.Language.Default."+member+".toString()");
eval(["object.",member," = ",functionString,";"].join(""));
}}if(parentMimic!=null){object._parentMimic=parentMimic;
}if(callPrefix!=null){object._callPrefix=callPrefix;
}};
Mimic.Language.Default={_activeExpectations:[],should:function(callString,ignoreArg){if(ignoreArg!=undefined){throw ('Only one parameter can be provided for <b>should()</b>. To provide extra parameters try the following:<br/><p><b>should("'+callString+'").using('+ignoreArg+", ...)</b></p>");
}var parameterCount=0;
var theFunction=eval("this."+callString);
if(theFunction!=null){var parameters=Mimic.Util.Parameters.arguments(theFunction);
if(parameters!=""){parameterCount=parameters.split(",").length;
}}var expectation=new Mimic.Expectation(this,callString,true,parameterCount);
expectation.unlimited=true;
Mimic.Log.Default.expectations.add(expectation);
this._activeExpectations=[];
this._activeExpectations.push(expectation);
return this;
},shouldNot:function(callString){var parameterCount=0;
var theFunction=eval("this."+callString);
if(theFunction!=null){var parameters=Mimic.Util.Parameters.arguments(theFunction);
if(parameters!=""){parameterCount=parameters.split(",").length;
}}var expectation=new Mimic.Expectation(this,callString,false,parameterCount);
expectation.unlimited=true;
Mimic.Log.Default.expectations.add(expectation);
this._activeExpectations=[];
this._activeExpectations.push(expectation);
return this;
},once:function(){if(this._activeExpectations.length==0){throw ('The function "once" can only be used when the function "should" precedes it');
}return this.exactly(1,time);
},twice:function(){if(this._activeExpectations.length==0){throw ('The function "twice" can only be used when the function "should" precedes it');
}return this.exactly(2,times);
},exactly:function(callCount,times){if(typeof callCount!="number"){throw ("A number must be provided when specifying the number of occurrences");
}if(this._activeExpectations.length==0){throw ('The function "exactly" can only be used when the function "should" precedes it');
}this._activeExpectations[0].unlimited=false;
for(var i=0;
i<callCount-1;
i++){var expectation=Mimic.Log.Default.expectations.copy(this._activeExpectations[0]);
Mimic.Log.Default.expectations.add(expectation);
this._activeExpectations.push(expectation);
}return this;
},andReturn:function(value){if(this._activeExpectations.length==0){throw ('The function "andReturn" can only be used when the function "should" precedes it');
}for(var i=0;
i<this._activeExpectations.length;
i++){this._activeExpectations[i].returns=value;
}},andThrow:function(value){if(this._activeExpectations.length==0){throw ('The function "andThrow" can only be used when the function "should" precedes it');
}for(var i=0;
i<this._activeExpectations.length;
i++){this._activeExpectations[i].throwz=value;
}},using:function(){if(this._activeExpectations.length==0){throw ('The function "using" can only be used when the function "should" precedes it');
}if(arguments[0]==anything){return;
}for(var i=0;
i<this._activeExpectations.length;
i++){this._activeExpectations[i].parameters=Mimic.Util.Object.clone(Array.apply(null,arguments));
}return this;
}};
Mimic.Verifier.Default={verify:function(){var expectations=Mimic.Log.Default.expectations;
var calls=Mimic.Log.Default.calls;
for(var i=0;
i<Mimic.Log.Default.expectations.expectations.length;
i++){var expectation=Mimic.Log.Default.expectations.expectations[i];
if(eval("expectation.mimic."+expectation.name)==null){throw ("Your specification did not pass!<br/><p><b>"+expectation.name+"()</b> does not exist, however it is referenced in the specification");
}if(expectation.throwz){throw (expectation.throwz);
}var callCount=calls.withName(expectation.mimic,expectation.name).length;
if(expectation.callExpected==false){if(callCount>0){throw ("Your specification did not pass!<br/><p><b>"+expectation.name+"()</b> was called, but was not expected to be called");
}}else{if(callCount==0){throw ("Your specification did not pass!<br/><p><b>"+expectation.name+"()</b> was expected but did not get called!");
}}var expectedCount=expectations.countFor(expectation.name);
if(expectedCount!=-1&&expectedCount!=callCount){throw ("Your specification did not pass!<br/><p>The specification executed <b>"+expectation.name+"() "+callCount+"</b> times, however the specification expected <b>"+expectation.name+"()</b> to be executed <b>"+expectedCount+"</b> times");
}if(expectation.parameters.length>0&&expectation.parameterCount==0){throw ("Your specification did not pass!<br/><p><b>"+expectation.name+"()</b> does not accept any parameters. You must remove the parameters from the specification <b>"+expectation.name+"()</b>");
}else{if(expectation.parameters.length>expectation.parameters.slice(0,expectation.parameterCount).length){throw ("Your specification did not pass!<br/><p>The specification executed <b>"+expectation.name+"()</b> with <b>"+expectation.parameters.length+"</b> parameters, however the specification expected <b>"+expectation.name+"()</b> with <b>"+expectation.parameters.slice(0,expectation.parameterCount).length+"</b> parameters");
}}}var failedExpectations=expectations.failedParametersFrom(calls);
var message=[];
for(var i=0;
i<failedExpectations.length;
i++){if(message.length==0){message.push("Your specification did not pass!<br/><p>The specification expected <b>"+failedExpectations[i].name+"("+Mimic.Util.Object.toString(failedExpectations[i].parameters)+")</b>");
}else{message.push(" or <b>"+failedExpectations[i].name+"("+Mimic.Util.Object.toString(failedExpectations[i].parameters)+")</b>");
}}if(message.length>0){message.push("</p>");
throw (message.join(""));
}}};
Mimic.Log.Default=new Mimic.Log(new Mimic.Calls(),new Mimic.Expectations());
Mimic.register(Mimic.Log.Default,new Mimic.Verifier(Mimic.Verifier.Default));
